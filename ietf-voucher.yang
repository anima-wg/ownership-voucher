module ietf-voucher {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher";
  prefix "vch";

  import ietf-yang-types { prefix yang; }
  import ietf-inet-types { prefix inet; }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Kent Watsen
              <mailto:kwatsen@juniper.net>
    Author:   Max Pritikin
              <mailto:pritikin@cisco.com>
    Author:   Michael Richardson
              <mailto:mcr+ietf@sandelman.ca>";

  description
   "This module defines the format for a voucher, which is
    produced by a device's manufacturer or delegate to securely
    assign one or more devices to an 'owner', so that the
    devices may establish a secure connection to the owner's
    network infrastructure.";

  revision "YYYY-MM-DD" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher and Voucher Revocation Profiles
      for Bootstrapping Protocols";
  }

  // top-level container
  container voucher {
    config false;
    description
      "A voucher that can be used to assign one or more
       devices to an owner.";

    leaf assertion {
      type enumeration {
        enum verified {
          description
            "Indicates that the ownership has been positively
             verified by the device's manufacturer or delegate
             (e.g., through sales channel integration).";
        }
        enum logged {
          description
            "Indicates that this ownership assignment has been
             logged into a database maintained by the device's
             manufacturer or delegate (voucher transparency).";
        }
      }
      mandatory true;
      description
        "The assertion is a statement from the manufacturer (or 
         delegate) regarding what assurance the manufacturer 
         provides, which supports more detailed policy checks
         by devices.  Devices MUST ensure that the assertion
         provided is acceptable before processing the voucher.";
    }

    leaf trusted-ca-certificate {
      type binary;
      description
        "An X.509 v3 certificate structure as specified by RFC 5280,
         Section 4 encoded using the ASN.1 distinguished encoding
         rules (DER), as specified in ITU-T X.690.

         This certificate is used by a bootstrapping device to trust
         a public key infrastructure, in order to verify a domain
         certificate supplied to the device separately by the 
         bootstrapping protocol.  The domain certificate MUST have
         this certificate somewhere in its chain of certificates.";

      reference
        "RFC 5280:
           Internet X.509 Public Key Infrastructure Certificate
           and Certificate Revocation List (CRL) Profile.
         ITU-T X.690:
            Information technology â€“ ASN.1 encoding rules:
            Specification of Basic Encoding Rules (BER),
            Canonical Encoding Rules (CER) and Distinguished
            Encoding Rules (DER).";
    }

    container certificate-identifier {
      must "../trusted-ca-certificate" {
        description
          "A trusted-ca-certificate must be present whenever
           this node is present"'
      }
      description
        "This container identifies values that a trusted domain
         certificate MUST contain, in addition to having a chain
         of trust to the trusted-ca-certificate also provided in
         this voucher.  This container is optional because not
         all vouchers identify domain certificates indirectly.
         When provided, the device MUST also perform RFC 6125 style
         validation of another certificate supplied to the device 
         separately by the bootstrapping protocol against all the
         provided ids.";
      leaf dn-id {
        type string;
        description
          "The certificate's entire subject field MUST match
           this value.";
      }
      leaf cn-id {
        type string;
        description
          "The certificate's subject field's common name value
           MUST match this value.";
      }
      leaf dns-id {
        type string;
        description
          "A subjectAltName entry of type dNSName in the
           certificate MUST match this value.";
      }
    }
  
    leaf-list unique-id {
      type string;
      min-elements 1;
      description
        "A non-empty list of regular expressions, each identifying one
         or more device unique identifiers (e.g., serial numbers).  For
         instance, the expression could match just a single serial
         number, or it might match a range of serial numbers.

         When processing a vouchers, devices MUST ensure that their
         unique identifier matches at least one regular expression in
         the list.  If no matching regular expression is found, the
         device MUST NOT process this voucher.";
    }

    leaf nonce {
      type string;  // unit64?
      description
        "A value that can be used by a device in some bootstrapping
         protocols to enable anti-replay protection.  This node is
         optional because it is not used by all bootstrapping
         protocols.

         When present, the device MUST compare the provided nonce
         value with another value that the device randomly generated
         and sent to a bootstrap server in an earlier bootstrapping
         message.  If the values do not match, then the device MUST
         NOT process this voucher.";
    }

    leaf created-on {
      type yang:date-and-time;
      description
        "A value indicating the date this voucher was created.  This
         node is optional because its primary purpose is for human
         consumption.  However, when present, devices that have
         reliable clocks SHOULD ensure that this created-on value
         is not greater than the current time.";
    }

    leaf expires-on {
      type yang:date-and-time;
      description
        "A value indicating when this voucher expires.  The node is
         optional as not all devices support expirations, such as
         devices lacking a reliable clock.

         If the device supports expirations and the expires-on value
         is less then the current time, then the device MUST not
         process this voucher.";
    }

    leaf revocation-location {
      type inet:uri;
      description
        "A URI indicating where revocation information for this 
         voucher may be obtained.  This node is optional as not
         all devices may support processing revocations.  The URL
         may address an issuer-wide revocation document or a
         voucher-specific revocation.

         A device may also obtain voucher revocation information from
         the same source where it obtained the voucher.  In this case,
         the device SHOULD attempt to obtain a potentially newer voucher
         revocation from the URL but, if it is unable to do so, for
         whatever reason, the device MUST process the provided voucher
         revocation.

         If a device processes a voucher revocation that indicates a
         voucher is no longer invalid, then the device MUST not
         process the voucher.  If a device is unable to process any
         voucher revocation, then the device SHOULD NOT process the
         voucher.";
    }

  }
}
