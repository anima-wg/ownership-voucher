



ANIMA Working Group                                            K. Watsen
Internet-Draft                                          Juniper Networks
Intended status: Standards Track                           M. Richardson
Expires: September 2, 2017                            Sandelman Software
                                                             M. Pritikin
                                                           Cisco Systems
                                                               T. Eckert
                                                           March 1, 2017


  Voucher and Voucher Revocation Profiles for Bootstrapping Protocols
                      draft-ietf-anima-voucher-01

Abstract

   This document defines the two artifacts "voucher" and "voucher-
   revocation", which are YANG-defined structures that have been signed
   by a TBD algorithm.

   The voucher artifact is generated by the device's manufacture or
   delegate.  The voucher's purpose is to securely assign one or more
   devices to an owner.  The voucher informs each device which entity it
   should consider to be its owner.

   The voucher revocation artifact is used by the manufacturer or
   delegate (i.e.  the issuer of the voucher) to revoke vouchers, if
   ever necessary.  The voucher revocation format defined herein
   supports both issuer-wide and voucher-specific constructs, enabling
   usage flexibility.

   For both artifacts, this document only defines the artifact, leaving
   it to future work to describe specialized protocols for accessing
   them.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."



Watsen, et al.          Expires September 2, 2017               [Page 1]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   This Internet-Draft will expire on September 2, 2017.

Copyright Notice

   Copyright (c) 2017 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.  Code Components extracted from this document must
   include Simplified BSD License text as described in Section 4.e of
   the Trust Legal Provisions and are provided without warranty as
   described in the Simplified BSD License.

Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   3
     1.1.  Terminology . . . . . . . . . . . . . . . . . . . . . . .   3
     1.2.  Requirements Language . . . . . . . . . . . . . . . . . .   3
     1.3.  Tree Diagram Notation . . . . . . . . . . . . . . . . . .   4
     1.4.  Secure Imprinting using Vouchers  . . . . . . . . . . . .   4
   2.  Voucher . . . . . . . . . . . . . . . . . . . . . . . . . . .   6
     2.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .   6
     2.2.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .   7
     2.3.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .   8
   3.  Voucher Revocation  . . . . . . . . . . . . . . . . . . . . .  13
     3.1.  Tree Diagram  . . . . . . . . . . . . . . . . . . . . . .  14
     3.2.  Examples  . . . . . . . . . . . . . . . . . . . . . . . .  15
     3.3.  YANG Module . . . . . . . . . . . . . . . . . . . . . . .  16
   4.  Signing Strategy  . . . . . . . . . . . . . . . . . . . . . .  21
   5.  Security Considerations . . . . . . . . . . . . . . . . . . .  22
     5.1.  Clock Sensitivity . . . . . . . . . . . . . . . . . . . .  22
   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  22
     6.1.  The IETF XML Registry . . . . . . . . . . . . . . . . . .  22
     6.2.  The YANG Module Names Registry  . . . . . . . . . . . . .  22
   7.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . .  23
   8.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  23
     8.1.  Normative References  . . . . . . . . . . . . . . . . . .  23
     8.2.  Informative References  . . . . . . . . . . . . . . . . .  23
   Appendix A.  Change Log . . . . . . . . . . . . . . . . . . . . .  25
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  25







Watsen, et al.          Expires September 2, 2017               [Page 2]

Internet-Draft       Voucher and Revocation Profiles          March 2017


1.  Introduction

   This document defines a strategy to securely assign devices to an
   owner, using an artifact signed, directly or indirectly, by the
   device's manufacturer.  This artifact is known as the voucher.

   A voucher may be useful in several contexts, but the driving
   motivation herein is to support secure bootstrapping mechanisms.
   This document only defines the voucher artifact, leaving it to other
   work such as [draft-ietf-netconf-zerotouch],
   [I-D.ietf-6tisch-dtsecurity-secure-join] and
   [draft-ietf-anima-bootstrapping-keyinfra] to describe specialized
   protocols for accessing and distributing them.  Assigning ownership
   is important to bootstrapping mechanisms so that the booting device
   can authenticate the network that's trying to take control of it.

   The lifetimes of vouchers may vary.  In some bootstrapping protocols
   the vouchers may be ephemeral, whereas in others the vouchers may be
   potentially long-lived.  In order to support the second category of
   vouchers, this document also defines a voucher revocation artifact,
   enabling the manufacturer or delegate to communicate the validity of
   its vouchers.

   This document uses YANG [RFC7950] to define the voucher and voucher
   revocation formats.  YANG is a data modeling language with
   established mappings to XML and JSON, with mappings to other
   encodings in progress.  Which encodings a particular solution uses is
   outside the scope of this document.

1.1.  Terminology

   This document uses [draft-ietf-anima-bootstrapping-keyinfra]
   terminology.  The new device is known as a "Pledge", which
   communicates with the "Join Registrar" of the owner's network, and
   the voucher is provided by the Manufacturer Authorized Signing
   Authority (MASA).

1.2.  Requirements Language

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in the
   sections below are to be interpreted as described in RFC 2119
   [RFC2119].








Watsen, et al.          Expires September 2, 2017               [Page 3]

Internet-Draft       Voucher and Revocation Profiles          March 2017


1.3.  Tree Diagram Notation

   The meaning of the symbols used in the tree-diagrams for YANG modules
   is as follows:

   o  Brackets "[" and "]" enclose list keys.

   o  Braces "{" and "}" enclose feature names, and indicate that the
      named feature must be present for the subtree to be present.

   o  Abbreviations before data node names: "rw" (read-write) represents
      configuration data and "ro" (read-only) represents state data.

   o  Symbols after data node names: "?" means an optional node, "!"
      means a presence container, and "*" denotes a list and leaf-list.

   o  Parentheses enclose choice and case nodes, and case nodes are also
      marked with a colon (":").

   o  Ellipsis ("...") stands for contents of subtrees that are not
      shown.

1.4.  Secure Imprinting using Vouchers

   A voucher is a cryptographically protected statement to the Pledge
   device indicating authorizing a zero-touch "imprint" on the Join
   Registrar of the domain.  The voucher imparts the following
   information to the Join Registrar and Pledge:

   Assertion Basis:  Indicates the method that protects the imprint
      (this is distinct from the voucher signature that protects the
      voucher itself).  This might include manufacturer asserted
      ownership verification, assured logging operations or reliance on
      Pledge endpoint behavior such as secure root of trust of
      measurement.  The Join Registrar might use this information.  Only
      some methods are normatively defined in this document.  Other
      methods are left for future work.

   Authentication of Join Registrar:  Indicates how the Pledge can
      authenticate the Join Registrar.  This might include an indication
      of the private PKIX trust anchor used by the Registrar, or an
      indication of a public PKIX trust anchor and additional CN-ID or
      DNS-ID information to complete authentication.  Symmetric key or
      other methods are left for future work.

   Anti-Replay Protections:  Time or nonce based information to
      constrain the voucher to time periods or bootstrap attempts.




Watsen, et al.          Expires September 2, 2017               [Page 4]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   A number of boostrapping scenarios can be met using differing
   combinations of this information.  All scenarios address the primary
   threat of a Man-in-The-Middle Registrar gaining control over the
   Pledge device.  The following combinations are referred to within
   this document by name.  Colloqually these are "types" of vouchers:

                |Assertion   |Registrar ID    | Validity    |
   Voucher      |Log-|Veri-  |Trust  |CN-ID or| RTC | Nonce |
   Name         | ged|  fied |Anchor |DNS-ID  |     |       |
   ---------------------------------------------------------|
   Audit        |  X |       | X     |        |     | X     |
   -------------|----|-------|-------|--------|-----|-------|
   Nonceless    |  X |       | X     |        | X   |       |
   Audit        |    |       |       |        |     |       |
   -------------|----|-------|-------|--------|-----|-------|
   Owner Audit  |  X |   X   | X     |        | X   | X     |
   -------------|----|-------|-------|--------|-----|-------|
   Owner ID     |    |   X   | X     |  X     | X   |       |
   -------------|----|-------|----------------|-----|-------|
   Bearer       |  X |       |   wildcard     | optional    |
   -------------|----|-------|----------------|-------------|

     NOTE: All voucher types include a 'Pledge ID serial number'
           (Not shown for space reasons)

   Audit Voucher:  An Audit Voucher is named after the logging assertion
      mechanisms that the Registrar then "audits" to enforce local
      policy.  The Registrar mitigates a MiTM Registrar by auditing that
      an unknown MiTM registrar does not appear in the log entries.
      This does not direct prevent the MiTM but provides a response
      mechanism that ensures the MiTM is unsuccessful.  This advantage
      is that actual ownership knowledge is not required on the MASA
      service.

   Nonceless Audit Voucher:  An Audit Voucher without a validity period
      statement.  Fundamentally the same as an Audit Voucher except that
      it can be issued in advance to support network partitions or to
      provide a permanent voucher for remote deployments.

   Ownership Audit Voucher:  An Audit Voucher where the MASA service has
      verified the Registrar as the authorized owner.  The MASA service
      mitigates a MiTM Registrar by refusing to generate Audit Voucher's
      for unauthorized Registrars.  The Registrar uses audit techniques
      to supplement the MASA.  This provides an ideal sharing of policy
      decisions and enforcement between the vendor and the owner.

   Ownership ID Voucher:  An Ownership ID Voucher is named after
      inclusion of the Pledge's CN-ID or DNS-ID within the voucher.  An



Watsen, et al.          Expires September 2, 2017               [Page 5]

Internet-Draft       Voucher and Revocation Profiles          March 2017


      example Ownership Voucher is defined in
      [draft-ietf-netconf-zerotouch].  The MASA service mitigates a MiTM
      Registrar by identifying the specific Registrar authorized to own
      the Pledge.

   Bearer Voucher:  A Bearer Voucher is named after the inclusion of a
      Registrar ID wildcard.  Because the Registrar identity is not
      indicated this voucher type must be treated as a secret and
      protected from exposure as any 'bearer' of the voucher can claim
      the Pledge device.  Publishing a nonceless bearer voucher
      effectively turns the specified Pledge into a "TOFU" device with
      minimal mitigation against MiTM Registrars.

2.  Voucher

   The voucher's purpose is to securely assign one or more Pledges to an
   owner.  The voucher informs each Pledge which entity it should
   consider to be its owner.

   The voucher is signed by the Pledge's MASA, using the signing
   strategy described in Section Section 4.  This section describes the
   voucher document, before it has been signed.

2.1.  Tree Diagram

   The following tree diagram (Section 1.3) illustrates a high-level
   view of a voucher document.  Each field in the voucher is fully
   described by the YANG module provided in Section 2.3.  Please see
   Section 2.3 for a detailed description of the Voucher format.

   module: ietf-voucher
     +--ro voucher
        +--ro assertion                        enumeration
        +--ro trusted-ca-certificate?          binary
        +--ro domain-certificate-identifier
        |  +--ro subject-hash?   binary
        |  +--ro cn-id?          string
        |  +--ro dns-id?         string
        +--ro device-identifier*               string
        +--ro nonce?                           string
        +--ro created-on?                      yang:date-and-time
        +--ro expires-on?                      yang:date-and-time
        +--ro revocation-location*             inet:uri








Watsen, et al.          Expires September 2, 2017               [Page 6]

Internet-Draft       Voucher and Revocation Profiles          March 2017


2.2.  Examples

   This section provides a couple Voucher examples for illustration
   purposes.

   The following example illustrates an ephemeral voucher (uses a nonce)
   encoded in JSON.  As is expected with a dynamically-generated
   voucher, only a single Pledge (device-identifier) is specified.  The
   MASA generated this voucher using the 'logged' assertion type,
   knowing that it would be suitable for the Pledge making the request.

   {
     "ietf-voucher:voucher": {
       "assertion": "logged",
       "trusted-ca-certificate": "base64-encoded X.509 DER",
       "owner-id": "Registrar3245",  # where did this field come from?
       "device-identifier": "JADA123456789",
       "created-on": "2016-10-07T19:31:42Z",
       "nonce": "987987623489567"
     }
   }

   The following illustrates a long-lived voucher (no nonce), encoded in
   XML.  This particular voucher applies to more than one Pledge
   (unique-id), which might relate to, for instance, they were all
   issued as part of the same purchase order.  This voucher includes
   both a trust anchor certificate (trusted-ca-certificate) as well as
   some additional information (cn-id and dns-id) that can be used to
   identify a specific domain certificate issued, perhaps indirectly, by
   the trust anchor CA.

   <voucher
      xmlns="urn:ietf:params:xml:ns:yang:ietf-voucher">
     <assertion>verified</assertion>
     <trusted-ca-certificate>
       base64-encoded X.509 DER
     </trusted-ca-certificate>
     <domain-certificate-identifier>
       <cn-id>Example Inc.</cn-id>
       <dns-id>example.com</dns-id>
     </domain-certificate-identifier>
     <device-identifier>AAA123456789</device-identifier>
     <device-identifier>BBB123456789</device-identifier>
     <device-identifier>CCC123456789</device-identifier>
     <created-on>2016-10-07T19:31:42Z</created-on>
   </voucher>





Watsen, et al.          Expires September 2, 2017               [Page 7]

Internet-Draft       Voucher and Revocation Profiles          March 2017


2.3.  YANG Module

<CODE BEGINS> file "ietf-voucher@2017-03-01.yang"

module ietf-voucher {
  yang-version 1.1;

  namespace
    "urn:ietf:params:xml:ns:yang:ietf-voucher";
  prefix "vch";

  import ietf-yang-types {
    prefix yang;
    reference "RFC 6991: Common YANG Data Types";
  }

  import ietf-inet-types {
    prefix inet;
    reference "RFC 6991: Common YANG Data Types";
  }

  import ietf-restconf {
    prefix rc;
    description
      "This import statement is only present to access the yang-data
       extension defined in RFC 8040.  The yang-data extension doesn't
       itself have anything to do with RESTCONF, but was placed in the
       that RFC for convenience.  This extension is being tracked to
       be moved to the next version of the YANG modeling language.
       Regardless where or how this extension statement is defined,
       there should not be any impact to a voucher's encoding.";
    reference "RFC 8040: RESTCONF Protocol";
  }

  organization
   "IETF ANIMA Working Group";

  contact
   "WG Web:   <http://tools.ietf.org/wg/anima/>
    WG List:  <mailto:anima@ietf.org>
    Author:   Kent Watsen
              <mailto:kwatsen@juniper.net>
    Author:   Max Pritikin
              <mailto:pritikin@cisco.com>
    Author:   Michael Richardson
              <mailto:mcr+ietf@sandelman.ca>";

  description



Watsen, et al.          Expires September 2, 2017               [Page 8]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   "This module defines the format for a voucher, which is produced by
    a pledge's manufacturer or delegate (MASA) to securely assign one
    or more pledges to an 'owner', so that the pledges may establish a
    secure connection to the owner's network infrastructure.";

  revision "2017-03-01" {
    description
     "Initial version";
    reference
     "RFC XXXX: Voucher and Voucher Revocation Profiles
      for Bootstrapping Protocols";
  }

  rc:yang-data voucher-artifact {
    uses voucher-grouping;
  }

  grouping voucher-grouping {
    description
      "Grouping only exists for pyang tree output...";

    container voucher {
      config false;
      description
        "A voucher that can be used to assign one or more
         pledges to an owner.";

      leaf assertion {
        type enumeration {
          enum verified {
            description
              "Indicates that the ownership has been positively
               verified by the MASA (e.g., through sales channel
               integration).";
          }
          enum logged {
            description
              "Indicates that this ownership assignment has been
               logged into a database maintained by the MASA, after
               first verifying that there has not been a previous
               claim in the database for the same pledge (voucher
               transparency).";
          }
        }
        mandatory true;
        description
          "The assertion is a statement from the MASA regarding how
           the owner was verified.   This statement enables pledges



Watsen, et al.          Expires September 2, 2017               [Page 9]

Internet-Draft       Voucher and Revocation Profiles          March 2017


           to support more detailed policy checks.  Pledges MUST
           ensure that the assertion provided is acceptable before
           processing the voucher.";
      }

      leaf trusted-ca-certificate {
        type binary;
        description
          "An X.509 v3 certificate structure as specified by RFC 5280,
           Section 4 encoded using the ASN.1 distinguished encoding
           rules (DER), as specified in ITU-T X.690.

           This certificate is used by a pledge to trust a public key
           infrastructure, in order to verify a domain certificate
           supplied to the pledge separately by the bootstrapping
           protocol.  The domain certificate MUST have this certificate
           somewhere in its chain of certificates.

           This field is optional because it may not be needed by all
           bootstrapping protocols.

           Note: the expiration date of this certificate effectively
                 imposes an upper limit on the voucher's expiration.";

        reference
          "RFC 5280:
             Internet X.509 Public Key Infrastructure Certificate
             and Certificate Revocation List (CRL) Profile.
           ITU-T X.690:
              Information technology - ASN.1 encoding rules:
              Specification of Basic Encoding Rules (BER),
              Canonical Encoding Rules (CER) and Distinguished
              Encoding Rules (DER).";
      }

      container domain-certificate-identifier {
        must "../trusted-ca-certificate" {
          description
            "A trusted-ca-certificate must be present whenever
             this node is present";
        }
        description
          "This container identifies specific values that a domain
           certificate, provided to the pledge separately by the
           bootstrapping protocol, MUST contain.  This is useful
           when, for instance, the trust anchor is a long-lived
           public CA certificate, while the domain certificate is
           reissued periodically.



Watsen, et al.          Expires September 2, 2017              [Page 10]

Internet-Draft       Voucher and Revocation Profiles          March 2017


           When provided, the pledge MUST perform RFC 6125 style
           validation of the domain certificate against all of
           the provided values.

           This container is optional because it is unneeded when,
           for instance, the trusted CA certificate is owned by the
           domain (i.e.  a private PKI), and hence the trust model
           can be more relaxed.";

        leaf subject-hash {
          type binary;
          description
            "The certificate's entire subject field MUST match
             this value.  This value is calculated as the SHA-1
             hash over the TBSCertificate's subject structure, as
             specified by RFC 5280 Section 4.1.2.6, encoded using
             the ASN.1 distinguished encoding rules (DER), as
             specified in ITU-T X.690.

             Note: by using the SHA-1 algorithm, the result can be
             easily compared to OpenSSL's 'subject_hash' output.";
        }
        leaf cn-id {
          type string;
          description
            "The certificate's subject field's 'common name' value
             MUST match this value.";
        }
        leaf dns-id {
          type string;
          description
            "A subjectAltName entry of type dNSName in the
             certificate MUST match this value.";
        }
      }

      leaf-list device-identifier {
        type string;
        min-elements 1;
        description
          "A non-empty list of POSIX regular expressions, each
           identifying one or more device identifiers (e.g., serial
           numbers). For instance, the expression could match just
           a single serial number, or it might match a range of
           serial numbers.

           When processing a vouchers, pledges MUST ensure that their
           unique identifier matches at least one regular expression in



Watsen, et al.          Expires September 2, 2017              [Page 11]

Internet-Draft       Voucher and Revocation Profiles          March 2017


           the list.  If no matching regular expression is found, the
           pledge MUST NOT process this voucher.";
      }

      leaf nonce {
        type string;  // unit64?
        description
          "A value that can be used by a pledge in some bootstrapping
           protocols to enable anti-replay protection.  This node is
           optional because it is not used by all bootstrapping
           protocols.

           When present, the pledge MUST compare the provided nonce
           value with another value that the pledge randomly generated
           and sent to a bootstrap server in an earlier bootstrapping
           message.  If the values do not match, then the pledge MUST
           NOT process this voucher.";
      }

      leaf created-on {
        type yang:date-and-time;
        description
          "A value indicating the date this voucher was created.  This
           node is optional because its primary purpose is for human
           consumption.  However, when present, pledges that have
           reliable clocks SHOULD ensure that this created-on value
           is not greater than the current time.";
      }

      leaf expires-on {
        type yang:date-and-time;
        description
          "A value indicating when this voucher expires.  The node is
           optional as not all pledges support expirations, such as
           pledges lacking a reliable clock.

           If the pledge supports expirations and the expires-on value
           is less then the current time, then the pledge MUST not
           process this voucher.";
      }

      leaf-list revocation-location {
        type inet:uri;
        description
          "Zero or more URIs indicating where revocation information for
           this voucher may be obtained.  This node is optional as not
           all pledges may support processing revocations.  More than
           one URI may be provided for high-availability reasons.  The



Watsen, et al.          Expires September 2, 2017              [Page 12]

Internet-Draft       Voucher and Revocation Profiles          March 2017


           URL may address an issuer-wide revocation document or a
           voucher-specific revocation document.

           A pledge may also obtain voucher revocation information from
           the same source where it obtained the voucher.  In this case,
           the pledge SHOULD attempt to obtain a potentially newer
           voucher revocation but, if it is unable to, for whatever
           reason, the pledge MUST process the provided voucher
           revocation.

           If a pledge processes a voucher revocation that indicates a
           voucher is no longer valid, then the pledge MUST not
           process the voucher.  If a pledge is unable to process any
           voucher revocation, then the pledge SHOULD NOT process the
           voucher.";
      }

    } // end voucher
  } // end voucher-grouping
}

<CODE ENDS>


3.  Voucher Revocation

   The vouchers revocation artifact is used to verify the revocation
   status of vouchers.  Voucher revocations are signed by the MASA.
   (i.e. the issuer of the voucher, or a delegate to the issuer).
   Vouchers revocation statements MUST be verified by pledges during the
   bootstrapping process, any MAY be verified by other entities (e.g.,
   registrar or equivalent) as needed.

   Revocations are generally needed when it is critical for pledges to
   know that assurances implied at the time the voucher was signed are
   still valid at the time the voucher is being processed.

   As mentioned in Section 1, the lifetimes of vouchers may vary.  In
   some bootstrapping protocols the vouchers may be ephemeral, whereas
   in others the vouchers may be potentially long-lived.  For
   bootstrapping protocols that support ephemeral vouchers, there is no
   need to support revocations.  For bootstrapping protocols that
   support long-lived vouchers, the need to support revoking vouchers is
   a decision that each manufacturer needs to make.

   If revocations are not supported, then voucher assignments are
   essentially forever, which may be acceptable for various kinds of




Watsen, et al.          Expires September 2, 2017              [Page 13]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   pledges.  If revocations are supported, then scenarios such as a key
   compromise or change in ownership can be supported.

   The voucher revocation format defined herein supports both issuer-
   wide (similar to a CRL) or voucher-specific (similar to an OCSP
   response) constructs, enabling usage flexibility.

   The issuer of a voucher revocation MUST either be the issuer of the
   Voucher or a another issuer specifically authorized to issue
   revocations on its behalf.  This delagation makes use to the same
   X.509 v3 extension that CAs use to delagate to Indirect CRL issuers
   or OCSP Responders.

3.1.  Tree Diagram

   The following tree diagram (Section 1.3) illustrates a high-level
   view of a voucher revocation document.  Each field in the voucher
   revocation is fully described by the YANG module provided in
   Section 3.3.  Please see Section 3.3 for a detailed description of
   the Voucher Revocation format.

   module: ietf-voucher-revocation
      +--ro created-on          yang:date-and-time
      +--ro expires-on?         yang:date-and-time
      +--ro (voucher-revocation-type)?
      |  +--:(issuer-wide)
      |  |  +--ro issuer-wide
      |  |     +--ro (list-type)?
      |  |        +--:(whitelist)
      |  |        |  +--ro whitelist
      |  |        |     +--ro voucher-identifier*   string
      |  |        +--:(blacklist)
      |  |           +--ro blacklist
      |  |              +--ro voucher-identifier*   string
      |  +--:(voucher-specific)
      |     +--ro voucher-specific
      |        +--ro voucher-identifier        string
      |        +--ro voucher-status            enumeration
      |        +--ro revocation-information
      |           +--ro revoked-on           yang:date-and-time
      |           +--ro revocation-reason    enumeration
      +--ro additional-data?
   module: ietf-voucher-revocation
   +--ro voucher-revocation
      +--ro revocation-type     enumeration
      +--ro created-on          yang:date-and-time
      +--ro expires-on?         yang:date-and-time
      +--ro (voucher-revocation-type)?



Watsen, et al.          Expires September 2, 2017              [Page 14]

Internet-Draft       Voucher and Revocation Profiles          March 2017


      |  +--:(issuer-wide)
      |  |  +--ro issuer-wide
      |  |     +--ro (list-type)?
      |  |        +--:(whitelist)
      |  |        |  +--ro whitelist
      |  |        |     +--ro voucher-identifier*   string
      |  |        +--:(blacklist)
      |  |           +--ro blacklist
      |  |              +--ro voucher-identifier*   string
      |  +--:(voucher-specific)
      |     +--ro voucher-specific
      |        +--ro voucher-identifier        string
      |        +--ro voucher-status            enumeration
      |        +--ro revocation-information
      |           +--ro revoked-on           yang:date-and-time
      |           +--ro revocation-reason    enumeration
      +--ro additional-data?
   module: ietf-voucher-revocation
     groupings:
     voucher-revocation-grouping
     +--ro voucher-revocation
        +--ro revocation-type     enumeration
        +--ro created-on          yang:date-and-time
        +--ro expires-on?         yang:date-and-time
        +--ro (voucher-revocation-type)?
           +--:(issuer-wide)
           |  +--ro issuer-wide
           |     +--ro blacklist
           |        +--ro voucher-identifier*   string
           +--:(voucher-specific)
              +--ro voucher-specific
                 +--ro voucher-identifier        string
                 +--ro voucher-status            enumeration
                 +--ro revocation-information
                    +--ro revoked-on           yang:date-and-time
                    +--ro revocation-reason    enumeration


3.2.  Examples

   This section provides a couple Voucher Revocation examples for
   illustration purposes.

   The following example illustrates an issuer-wide voucher revocation
   in XML.  This examples shows that three vouchers have been revoked,
   which imples that all other issued vouchers remain valid.





Watsen, et al.          Expires September 2, 2017              [Page 15]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   <voucher-revocation
      xmlns="urn:ietf:params:xml:ns:yang:ietf-voucher-revocation">
     <revocation-type>issuer-wide</revocation-type>
     <created-on>2016-10-31T23:59:59Z</created-on>
     <expires-on>2016-12-31T23:59:59Z</expires-on>
     <issuer-wide>
       <blacklist>
         <voucher-identifier>some fingerprint</voucher-identifier>
         <voucher-identifier>some fingerprint</voucher-identifier>
         <voucher-identifier>some fingerprint</voucher-identifier>
       </blacklist>
     </issuer-wide>
   </voucher-revocation>

   The following example illustrates a voucher-specific revocation in
   JSON.  This example shows that the one voucher has be revoke, and
   additionally provides some information about the voucher revocation.

   {
     "ietf-voucher-revocation:voucher-revocation": {
       "revocation-type": "voucher-specific",
       "created-on": "2016-10-31T23:59:59Z"
       "expires-on": "2016-12-31T23:59:59Z"
       "voucher-specific": [
         "voucher-identifier": "some fingerprint",
         "voucher-status": "revoked",
         "revocation-information": [
           "revoked-on": "2016-11-31T23:59:59Z",
           "revocation-reason": "key-compromise"
         ]
       ]
     }
   }

3.3.  YANG Module

  <CODE BEGINS> file "ietf-voucher-revocation@2017-03-01.yang"

  module ietf-voucher-revocation {
    yang-version 1.1;

    namespace
      "urn:ietf:params:xml:ns:yang:ietf-voucher-revocation";
    prefix "vr";

    import ietf-yang-types {
      prefix yang;
      reference "RFC 6991: Common YANG Data Types";



Watsen, et al.          Expires September 2, 2017              [Page 16]

Internet-Draft       Voucher and Revocation Profiles          March 2017


    }

    import ietf-restconf {
      prefix rc;
      description
        "This import statement is only present to access the yang-data
         extension defined in RFC 8040.  The yang-data extension doesn't
         itself have anything to do with RESTCONF, but was placed in the
         that RFC for convenience.  This extension is being tracked to
         be moved to the next version of the YANG modeling language.
         Regardless where or how this extension statement is defined,
         there should not be any impact to a voucher revocation's
         encoding.";
      reference "RFC 8040: RESTCONF Protocol";
    }

    organization
     "IETF ANIMA Working Group";

    contact
     "WG Web:   <http://tools.ietf.org/wg/anima/>
      WG List:  <mailto:anima@ietf.org>
      Author:   Kent Watsen
                <mailto:kwatsen@juniper.net>
      Author:   Max Pritikin
                <mailto:pritikin@cisco.com>
      Author:   Michael Richardson
                <mailto:mcr+ietf@sandelman.ca>";

    description
     "This module defines the format for a voucher revocation, which
      is produced by the pledge's manufacturer or delegate (MASA) to
      indicate the revocation status of one or more vouchers.";

    revision "2017-03-01" {
      description
       "Initial version";
      reference
       "RFC XXXX: Voucher and Voucher Revocation Profiles
        for Bootstrapping Protocols";
    }

    rc:yang-data voucher-revocation-artifact {
      uses voucher-revocation-grouping;
    }

    grouping voucher-revocation-grouping {
      description



Watsen, et al.          Expires September 2, 2017              [Page 17]

Internet-Draft       Voucher and Revocation Profiles          March 2017


        "Grouping only exists for pyang tree output...";

      container voucher-revocation {
        config false;
        description
          "A voucher revocation that can provide the revocation
           status information for one or more pledges.";

        leaf revocation-type {
          type enumeration {
            enum issuer-wide {
              description
                "Indicates that this revocation spans all
                 the vouchers under the issuer's scope.";
            }
            enum voucher-specific {
              description
                "Indicates that this revocation only regards
                 a single voucher.";
            }
          }
          mandatory true;
          description
            "The revocation-type indicates if the revocation
             is issuer-wide (like a CRL) or voucher-specific
             (like an OCSP Response).  Both variations exist
             to enable implementations to choose between the
             number of revocation artifacts generated versus
             individual artifact size.";
        }

        leaf created-on {
          type yang:date-and-time;
          mandatory true;
          description
            "The date this voucher revocation was created";
        }

        leaf expires-on {
          type yang:date-and-time;
          description
            "An optional date value for when this voucher
             revocation expires.";
        }

        choice voucher-revocation-type {
          description
            "Identifies the revocation type as being either issuer-wide



Watsen, et al.          Expires September 2, 2017              [Page 18]

Internet-Draft       Voucher and Revocation Profiles          March 2017


             or voucher-specific.";

          container issuer-wide {
            description
              "This revocation provides issuer-wide revocation status
               (similar to a CRL).";

            container blacklist {
              description
                "Indicates that the list of vouchers have been
                 revoked.  If a voucher is not listed, then it
                 is considered good.";
              leaf-list voucher-identifier {
                type string;
                description
                  "A fingerprint over the voucher artifact.";
              }
            }
          } // end issuer-wide

          container voucher-specific {
            description
              "This revocation provides voucher-specific revocation
               status (similar to an OCSP response).";

            leaf voucher-identifier {
              type string;
              mandatory true;
              description
                "A fingerprint over the voucher artifact.";
            }

            leaf voucher-status {
              type enumeration {
                enum good {
                  description
                    "Indicates that this voucher is valid";
                }
                enum revoked {
                  description
                    "Indicates that this voucher is invalid";
                }
                enum unknown {
                  description
                    "Indicates that the voucher's status is unknown";
                }
              }
              mandatory true;



Watsen, et al.          Expires September 2, 2017              [Page 19]

Internet-Draft       Voucher and Revocation Profiles          March 2017


              description
                "Indicates if the revocation status for the specified
                 voucher.";
            }

            container revocation-information {
              must "../voucher-status = 'revoked'";

              leaf revoked-on {
                type yang:date-and-time;
                mandatory true;
                description
                  "The date this voucher was revoked";
              }

              leaf revocation-reason {  // remove, or add to
                type enumeration {      // issuer-wide also?
                  enum unspecified {
                    description
                      "Indicates that the reason the voucher
                       was revoked is unspecified.";
                  }
                  enum key-compromise {
                    description
                      "Indicates that the reason the voucher
                       was revoked is because its key was
                       compromised.";
                  }
                  enum issuer-compromise {
                    description
                      "Indicates that the reason the voucher
                       was revoked is because its issuer was
                       compromised.";
                  }
                  enum affiliation-changed {
                    description
                      "Indicates that the reason the voucher
                       was revoked is because its affiliation
                       changed (e.g., pledge assigned to a
                       new owner.";
                  }
                  enum superseded {
                    description
                      "Indicates that the reason the voucher
                       was revoked is because it has been
                       superseded (e.g., the previous voucher
                       expired.";
                  }



Watsen, et al.          Expires September 2, 2017              [Page 20]

Internet-Draft       Voucher and Revocation Profiles          March 2017


                  enum cessation-of-operation {
                    description
                      "Indicates that the reason the voucher
                       was revoked is because its issuer has
                       ceased operations.";
                  }
                }  // end enumeration

                mandatory true;
                description
                  "modeled after 'CRLReason' in RFC 5280.";
              } // end revocation reason

              description
                "Provides details regarding why a voucher's revocation.
                 Modeled after 'ResponseData' in RFC6960.";

            } // end revocation-information
          } // end voucher-specific
        } // end voucher-revocation-type
      } // end voucher-revocation
    } // end voucher-revocation-grouping

  }

  <CODE ENDS>


4.  Signing Strategy

   Both the Voucher and Voucher Revocation are signed using a PKCS#7
   SignedData structure, as specified by Section 9.1 of RFC 2315, having
   the 'content' be JSON-encoded data conforming to the YANG modules
   described in sections Section 2 and Section 3.

   Both the Voucher and Voucher Revocation PKCS#7 structures MAY contain
   additional structures deemed useful.  For instance the Voucher
   structure MAY also contain all of the certificates leading up to and
   including a root-level trust anchor certificate.  Likewise, the
   Voucher Revocation structure MAY also include the CRL or OCSP
   Response for each of the certificates that MAY be stapled to the
   Voucher structure.

   While it may make sense for the MASA to issue a Voucher with a
   stapled certificate chain, it not make sense for the MASA to issue a
   Voucher Revocation with a stapled certificate chain, as each may be
   refreshed at different times.  However, it is possible for a




Watsen, et al.          Expires September 2, 2017              [Page 21]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   intermediate to dynamically add in all the CRLs or OCSP Responses
   just before providing the Voucher Revocation to the Pledge.

5.  Security Considerations

5.1.  Clock Sensitivity

   This document defines artifacts containing time values for voucher
   expirations and revocations, which require an accurate clock in order
   to be processed correctly.  Vendors planning on issuing vouchers with
   time values MUST ensure devices have an accurate clock when shipped
   from manufacturing facilities, and take steps to prevent clock
   tampering.

   If it is not possible to ensure clock accuracy then nonce based
   validity period vouchers should be used.  Such implementations SHOULD
   assume that vouchers never expire and are not revokable.

   It is important to note that implementations SHOULD NOT rely on NTP
   for time, as it is not a secure protocol.

6.  IANA Considerations

6.1.  The IETF XML Registry

   This document registers two URIs in the IETF XML registry [RFC3688].
   Following the format in [RFC3688], the following registrations are
   requested:

      URI: urn:ietf:params:xml:ns:yang:ietf-voucher
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

      URI: urn:ietf:params:xml:ns:yang:ietf-voucher-revocation
      Registrant Contact: The ANIMA WG of the IETF.
      XML: N/A, the requested URI is an XML namespace.

6.2.  The YANG Module Names Registry

   This document registers two YANG modules in the YANG Module Names
   registry [RFC6020].  Following the format defined in [RFC6020], the
   the following registrations are requested:









Watsen, et al.          Expires September 2, 2017              [Page 22]

Internet-Draft       Voucher and Revocation Profiles          March 2017


      name:         ietf-voucher
      namespace:    urn:ietf:params:xml:ns:yang:ietf-voucher
      prefix:       vch
      reference:    RFC XXXX

      name:         ietf-voucher-revocation
      namespace:    urn:ietf:params:xml:ns:yang:ietf-voucher-revocation
      prefix:       vchr
      reference:    RFC XXXX

7.  Acknowledgements

   The authors would like to thank for following for lively discussions
   on list and in the halls (ordered by last name):

8.  References

8.1.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <http://www.rfc-editor.org/info/rfc2119>.

   [RFC6020]  Bjorklund, M., Ed., "YANG - A Data Modeling Language for
              the Network Configuration Protocol (NETCONF)", RFC 6020,
              DOI 10.17487/RFC6020, October 2010,
              <http://www.rfc-editor.org/info/rfc6020>.

   [RFC7950]  Bjorklund, M., Ed., "The YANG 1.1 Data Modeling Language",
              RFC 7950, DOI 10.17487/RFC7950, August 2016,
              <http://www.rfc-editor.org/info/rfc7950>.

8.2.  Informative References

   [draft-ietf-anima-bootstrapping-keyinfra]
              Pritikin, M., Richardson, M., Behringer, M., and S.
              Bjarnason, "Bootstrapping Key Infrastructures", draft-
              ietf-anima-bootstrapping-keyinfra (work in progress),
              2016, <https://tools.ietf.org/html/draft-ietf-anima-
              bootstrapping-keyinfra>.

   [draft-ietf-netconf-zerotouch]
              Watsen, K. and M. Abrahamsson, "Zero Touch Provisioning
              for NETCONF or RESTCONF based Management", draft-ietf-
              netconf-zerotouch (work in progress), 2016,
              <https://tools.ietf.org/html/draft-ietf-netconf-
              zerotouch>.



Watsen, et al.          Expires September 2, 2017              [Page 23]

Internet-Draft       Voucher and Revocation Profiles          March 2017


   [I-D.ietf-6tisch-dtsecurity-secure-join]
              Richardson, M., "6tisch Secure Join protocol", draft-ietf-
              6tisch-dtsecurity-secure-join-00 (work in progress),
              December 2016.

   [I-D.ietf-ace-cbor-web-token]
              Jones, M., Wahlstroem, E., Erdtman, S., and H. Tschofenig,
              "CBOR Web Token (CWT)", draft-ietf-ace-cbor-web-token-02
              (work in progress), January 2017.

   [RFC3688]  Mealling, M., "The IETF XML Registry", BCP 81, RFC 3688,
              DOI 10.17487/RFC3688, January 2004,
              <http://www.rfc-editor.org/info/rfc3688>.

   [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web Token
              (JWT)", RFC 7519, DOI 10.17487/RFC7519, May 2015,
              <http://www.rfc-editor.org/info/rfc7519>.


































Watsen, et al.          Expires September 2, 2017              [Page 24]

Internet-Draft       Voucher and Revocation Profiles          March 2017


Appendix A.  Change Log

Authors' Addresses

   Kent Watsen
   Juniper Networks

   EMail: kwatsen@juniper.net


   Michael C. Richardson
   Sandelman Software

   EMail: mcr+ietf@sandelman.ca
   URI:   http://www.sandelman.ca/


   Max Pritikin
   Cisco Systems

   EMail: pritikin@cisco.com


   Toerless Eckert

   EMail: tte+anima@cs.fau.de

























Watsen, et al.          Expires September 2, 2017              [Page 25]
